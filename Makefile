#
# Code generated by `gkgen`
#

.DEFAULT_GOAL := gen
.PHONY: data

GOPATH := $(shell go env GOPATH)

entryPoint := base/cmd/main.go

# Git
# gitBranch := $(shell git rev-parse --abbrev-ref HEAD)
# gitCommit := $(shell git rev-parse --short HEAD)

-include .makerc
-include .make.env

clean:
	git clean -fdx

fmt:
	go fmt ./... > /dev/null

lint:
	golangci-lint run --fix ./...

data:
ifneq ($(wildcard data/.*),)
	mkdir -p dist
	cp data/* dist/
endif

# Build and exec instead of @go run $(entryPoint)
# to run on Windows without deal with the Firewall
run: data
	go build -o dist/$(NAME)-dev $(entryPoint)
	dist/$(NAME)-dev $(args) ../hugo-theme

watch:
	nodemon -e go --ignore dist/ --exec make run

test:
	go test -v ./... -cover

test-clean:
	go clean -testcache

###########################################################
# Generate
###########################################################
proto:
	protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--go-grpc_out=base/pb \
		--go-grpc_opt=paths=source_relative \
		base/pb/strapi-webhook.proto

	protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--gotag_out=. \
		base/pb/strapi-webhook.proto

src:
	gkgen -b $(args) .
	make -s proto
	make -s fmt

impl:
	gkgen -i $(args) .
	make -s fmt

gen:
	gkgen $(args) .
	make -s proto
	make -s fmt
	cp config/service.k8s.yaml chart/values.yaml
	helm lint chart/

gen-clean:
	gkgen -clean .

build-windows:
	GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/$(NAME).exe $(entryPoint)

build-linux:
	GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/$(NAME) $(entryPoint)

build-darwin:
	GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/$(NAME)-darwin $(entryPoint)

build: gen data build-windows build-linux build-darwin

###########################################################
# OCI
###########################################################
oci:
	buildah bud -t $(NAME):$(VERSION) $(args)

# Push OCI
oci-push:
ifeq ($(and $(REGISTRY_USERNAME),$(REGISTRY_PWD)),)
	@echo 'User and password are incorrect'
	@exit 1
endif

	buildah login -u $(REGISTRY_USERNAME) -p $(REGISTRY_PWD) $(REGISTRY)
	buildah push $(NAME):$(VERSION) $(REGISTRY)/$(REGISTRY_REPO)/$(NAME):$(VERSION)

###########################################################
# Helm
###########################################################
helm:
	gkgen -k $(args) .
	cp config/service.k8s.yaml chart/values.yaml
	helm lint chart/

# Generate template for testing
pod: helm
	helm template $(NAME) chart/ > chart/k8s.yaml

# Helm chart
package: helm
ifndef HELM_REPO
	@echo 'Missing "HELM_REPO" in .makerc'
	@exit 1
endif

	helm cm-push chart/ $(HELM_REPO)

# Helm install
install:
	ssh $(SSH_DESTINATION) '$(HELM_CMD) repo update && $(HELM_CMD) install $(NAME) $(HELM_REPO)/$(NAME) -n $(NAMESPACE) --version $(VERSION)'

# Helm upgrade
upgrade:
	ssh $(SSH_DESTINATION) '$(HELM_CMD) repo update && $(HELM_CMD) upgrade $(NAME) $(HELM_REPO)/$(NAME) -n $(NAMESPACE) --version $(VERSION)'

# Restart deployment
restart:
	@ssh $(SSH_DESTINATION) '$(KUBECTL_CMD) rollout restart $(DEPLOYMENT_KIND)/$(NAME) -n $(NAMESPACE)'

# Helm uninstall
uninstall:
	ssh $(SSH_DESTINATION) '$(HELM_CMD) uninstall $(NAME) -n $(NAMESPACE)'
