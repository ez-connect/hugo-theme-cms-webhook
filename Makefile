#
# Code generated by `gkgen`
#

.PHONY: data

# Environments
-include .makerc

define get_base_config
$(shell perl -nle 'print $$1 if /$1/' .config/service.base.yaml)
endef

define get_k8s_config
$(shell perl -nle 'print lc $$1 if /$1/' .config/service.k8s.yaml)
endef

# Service
NAME			= $(call get_base_config,name: (\S+))
VERSION			= $(call get_base_config,version: (\S+))
DESCRIPTION		= $(call get_base_config,description: (.+))
README			= $(call get_base_config,readme: (\S+))
NAMESPACE		?= $(call get_base_config,namespace: (\S+))
PACKAGE			?= $(call get_base_config,package: (\S+))
ARCH 			?= amd64
BUILD_DIR		?= build

# Registry
REGISTRY 		?= registry.gitlab.com
REGISTRY_REPO 	?= free-mind/hub
DOCKERFILE 		?= Dockerfile
DEPLOYMENT_KIND	?= $(call get_k8s_config,kind: (\w+))

ifeq ($(HELM_NAMESPACE),)
ifneq ($(NAMESPACE),)
	HELM_NAMESPACE	= $(NAMESPACE)
else
	HELM_NAMESPACE	= dev
endif
endif

# OCI
ifndef IMAGE
	ifneq ($(NAMESPACE),)
		IMAGE	= $(NAMESPACE)-$(NAME)
	else
		IMAGE	= $(NAME)
	endif
endif

TAG				?= $(VERSION)

# Lists all targets
help:
	@grep -B1 -E "^[a-zA-Z0-9_%-]+:([^\=]|$$)" Makefile \
		| grep -v -- -- \
		| sed 'N;s/\n/###/' \
		| sed -n 's/^#: \(.*\)###\(.*\):.*/\2###\1/p' \
		| column -t -s '###'

#: Removes untracked files from the working tree
clean:
#	go clean -cache -testcache -modcache -x
	gkgen clean $(arg)


#: Code formatting
fmt:
	go fmt ./... > /dev/null

#: Runs the linters
lint:
	golangci-lint run --fix ./...

# Builds and exec instead of @go run
# to run on Windows without deal with the Firewall
#: Launchs the service
run:
	go build -o $(BUILD_DIR)/$(NAME) $(D_FLAGS)
	$(BUILD_DIR)/$(NAME) serve $(args)

#: Launchs the service then watching for changes
watch:
	-nodemon -e go --ignore $(BUILD_DIR)/ --exec make run

#: Automates testing the packages
test:
	go test -v ./... -cover

test-clean:
	go clean -testcache

# -----------------------------------------------------------------------------
# Build
# -----------------------------------------------------------------------------
#: Build for a platform: linux, windows, darwin
build-%:
	echo "Building for $*"; \
	output=$(NAME); \
	if [ "$*" = 'windows' ]; then \
		output=$$output.exe; \
	fi; \
	GOOS=$* GOARCH=$(ARCH) go build -o $(BUILD_DIR)/$*/$$output $(P_FLAGS); \
	tar -C $(BUILD_DIR)/$* -zcvf $(BUILD_DIR)/$(NAME)-$*.tar.gz $$output > /dev/null; \

# -----------------------------------------------------------------------------
# OCI
# -----------------------------------------------------------------------------
#: Builds an OCI image using instructions in 'Dockerfile'
oci:
	podman build -t $(IMAGE):$(VERSION) -f $(DOCKERFILE) $(args) \
		--annotation org.opencontainers.image.created="$(shell date -I'seconds')" \
		--annotation org.opencontainers.image.description="$(DESCRIPTION)" \
		--annotation io.artifacthub.package.readme-url="$(README)"

#: Pushes an image to a specified location that defined in '.makerc'
oci-push:
	podman login $(REGISTRY)
	podman push $(IMAGE):$(VERSION) $(REGISTRY)/$(REGISTRY_REPO)/$(IMAGE):$(TAG)

# -----------------------------------------------------------------------------
# Helm
# -----------------------------------------------------------------------------
#: Generates the Helm chart
helm:
	gkgen helm $(args)
	cp .config/service.k8s.yaml .chart/values.yaml
ifneq ($(wildcard .chart/Chart.lock),)
	rm .chart/Chart.lock
endif
	helm dependency build .chart/
	helm lint .chart/

#: Render chart templates locally and write to '.chart/k8s.yaml'
pod: helm
	helm template $(IMAGE) .chart/ > .chart/k8s.yaml

#: Uploads chart to the repo that defined in '.makerc'
package: helm
	helm cm-push .chart/ $(HELM_REPO)

#: Installs the chart to a remote defined in '.makerc'
install:
	helm repo update && helm install $(IMAGE) $(HELM_REPO)/$(IMAGE) -n $(HELM_NAMESPACE) --version $(VERSION) $(args)

#: Upgrades the release to the current version of the chart
upgrade:
	helm repo update && helm upgrade $(IMAGE) $(HELM_REPO)/$(IMAGE) -n $(HELM_NAMESPACE) --version $(VERSION) $(args)

#: Restarts the release
restart:
	kubectl rollout restart $(DEPLOYMENT_KIND)/$(IMAGE) -n $(HELM_NAMESPACE) $(args)

#: Uninstalls the service
uninstall:
	helm uninstall $(IMAGE) -n $(HELM_NAMESPACE) $(args)
