#
# Code generated by `gkgen`
#

.PHONY: data

GOPATH := $(shell go env GOPATH)

entryPoint := base/cmd/main.go

# Git
# gitBranch := $(shell git rev-parse --abbrev-ref HEAD)
# gitCommit := $(shell git rev-parse --short HEAD)

-include .makerc
-include .make.env

# Lists all targets
help:
	@grep -B1 -E "^[a-zA-Z0-9_-]+\:([^\=]|$$)" Makefile \
		| grep -v -- -- \
		| sed 'N;s/\n/###/' \
		| sed -n 's/^#: \(.*\)###\(.*\):.*/\2###\1/p' \
		| column -t  -s '###'

#: Removes untracked files from the working tree
clean:
	git clean -fdx

#: Code formatting
fmt:
	go fmt ./... > /dev/null

#: Runs the linters
lint:
	golangci-lint run --fix ./...

#: Copy '/data/*' to '/dist'
data:
ifneq ($(wildcard data/.*),)
	mkdir -p dist
	cp data/* dist/
endif

# Builds and exec instead of @go run $(entryPoint)
# to run on Windows without deal with the Firewall
#: Launchs the service
run: data
	go build -o dist/$(NAME)-dev $(entryPoint)
	dist/$(NAME)-dev $(args)

#: Launchs the service then watching for changes
watch:
	nodemon -e go --ignore dist/ --exec make run

#: Automates testing the packages
test:
	go test -v ./... -cover


test-clean:
	go clean -testcache

###########################################################
# Generate
###########################################################
#: Parse 'base/pb/*.proto' and generate output
proto:
	protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--go-grpc_out=base/pb \
		--go-grpc_opt=paths=source_relative \
		base/pb/strapi-webhook.proto

	protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--gotag_out=. \
		base/pb/strapi-webhook.proto

#: Parse '.config' and generate base sources
src:
	gkgen -b $(args) .
	make -s proto
	make -s fmt

#: Parse '.config' and generate implement sources in `/impl`
impl:
	gkgen -i $(args) .
	make -s fmt

#: Parse '.config' and generate output
gen:
	gkgen $(args) .
	make -s proto
	make -s fmt

#: Cleans output by `gkgen`
gen-clean:
	gkgen -clean .

#: Build compiles the service for Windows
build-windows:
	GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/$(NAME).exe $(entryPoint)
	tar -C dist -zcvf dist/$(NAME)-windows.tar.gz $(NAME).exe

#: Build compiles the service for Linux
build-linux:
	GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/$(NAME) $(entryPoint)
	tar -C dist -zcvf dist/$(NAME)-linux.tar.gz $(NAME)

#: Build compiles the service for MacOS
build-darwin:
	GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/$(NAME)-darwin $(entryPoint)
	tar -C dist -zcvf dist/$(NAME)-darwin.tar.gz $(NAME)-darwin

#: Build compiles the service for Windows, Linux and MacOS
build: gen data build-windows build-linux build-darwin

###########################################################
# OCI
###########################################################
#: Builds an OCI image using instructions in 'Dockerfile'
oci:
	buildah bud -t $(NAME):$(VERSION) $(args)

# Push OCI
#: Pushes an image to a specified location that defined in '.makerc'
oci-push:
ifeq ($(and $(REGISTRY_USERNAME),$(REGISTRY_PWD)),)
	@echo 'User and password are incorrect'
	@exit 1
endif

	buildah login -u $(REGISTRY_USERNAME) -p $(REGISTRY_PWD) $(REGISTRY)
	buildah push $(NAME):$(VERSION) $(REGISTRY)/$(REGISTRY_REPO)/$(NAME):$(VERSION)

###########################################################
# Helm
###########################################################
#: Generates the Helm chart
helm:
	gkgen -k $(args) .
	cp .config/service.k8s.yaml .chart/values.yaml
ifneq ($(wildcard .chart/Chart.lock),)
	rm .chart/Chart.lock
endif
	helm dependency build .chart/
	helm lint .chart/

#: Render chart templates locally and write to '.chart/k8s.yaml'
pod: helm
	helm template $(NAME) .chart/ > .chart/k8s.yaml

#: Uploads chart to the repo that defined in '.makerc'
package: helm
ifndef HELM_REPO
	@echo 'Missing "HELM_REPO" in .makerc'
	@exit 1
endif

	helm cm-push .chart/ $(HELM_REPO)

#: Installs the chart to a remote defined in '.makerc'
install:
	ssh $(SSH_DESTINATION) '$(HELM_CMD) repo update && $(HELM_CMD) install $(NAME) $(HELM_REPO)/$(NAME) -n $(NAMESPACE) --version $(VERSION)'

#: Upgrades the release to the current version of the chart
upgrade:
	ssh $(SSH_DESTINATION) '$(HELM_CMD) repo update && $(HELM_CMD) upgrade $(NAME) $(HELM_REPO)/$(NAME) -n $(NAMESPACE) --version $(VERSION)'

#: Restarts the release
restart:
	@ssh $(SSH_DESTINATION) '$(KUBECTL_CMD) rollout restart $(DEPLOYMENT_KIND)/$(NAME) -n $(NAMESPACE)'

#: Uninstalls the service
uninstall:
	ssh $(SSH_DESTINATION) '$(HELM_CMD) uninstall $(NAME) -n $(NAMESPACE)'
