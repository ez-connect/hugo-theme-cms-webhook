#
# Code generated by `gkgen`
#

.DEFAULT_GOAL := gen
# GOPATH := $(shell go env GOPATH)

# Service
name := strapi-webhook
platforms := windows linux darwin
arch := amd64
entryPoint := main.go

# Git
# gitBranch := $(shell git rev-parse --abbrev-ref HEAD)
# gitCommit := $(shell git rev-parse --short HEAD)

include .makerc
include .make.env

clean:
	@git clean -fdx

helm:
	@gkgen -k $(args) .
	@helm lint chart

proto:
	@protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--go-grpc_out=base/pb \
		--go-grpc_opt=paths=source_relative \
		base/pb/strapi-webhook.proto

	@protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--gotag_out=. \
		base/pb/strapi-webhook.proto

fmt:
	@go fmt ./... > /dev/null

lint:
	@golangci-lint run --fix ./...

src:
	@gkgen -b $(args) .
	@make -s proto
	@make -s fmt

impl:
	@gkgen -i $(args) .
	@make -s fmt

gen:
	@gkgen $(args) .
	@make -s proto
	@make -s fmt
	@helm lint chart

gen-clean:
	@gkgen -clean .

# Build and exec instead of @go run $(entryPoint)
# to run on Windows without deal with the Firewall
run:
	@go build -o dist/$(name) $(entryPoint)
	@dist/$(name) $(args) ../hugo-theme

watch:
	@nodemon -e go --ignore dist/ --exec make run

test:
	@go test -v ./... -cover

test-clean:
	@go clean -testcache

build: gen proto
	-@rm -rf dist
	@for p in $(platforms); do \
		echo dist/$(name)-$$p; \
		GOOS=$$p GOARCH=$(arch) go build -ldflags="-s -w" -o dist/$(name)-$$p $(entryPoint); \
		pushd dist > /dev/null; \
		tar -zcvf $(name)-$$p.tar.gz $(name)-$$p; \
		popd > /dev/null; \
	done

# K8s
# @buildah bud -t sample:0.0.1 args='--build-arg name=$(name) --build-arg version=$(VERSION)'

oci:
	@buildah bud -t $(name):$(VERSION) $(args)

oci-push:
ifeq ($(and $(REGISTRY_USERNAME),$(REGISTRY_PWD)),)
	@echo 'User and password are incorrect'
	@exit 1
endif

	@buildah login -u $(REGISTRY_USERNAME) -p $(REGISTRY_PWD) $(REGISTRY)
	@buildah push $(name):$(VERSION) $(REGISTRY)/$(REGISTRY_REPO)/$(name):$(VERSION)

# Helm chart
package:
ifndef HELM_REPO
	@echo 'Missing "HELM_REPO" in .makerc'
	@exit 1
endif

	@helm cm-push chart/ $(HELM_REPO)

deploy:
	@ssh $(SSH_DESTINATION) '$(HELM_CMD) install $(name) $(HELM_REPO)/$(name) -n $(NAMESPACE)'

deploy-delete:
	@ssh $(SSH_DESTINATION) '$(HELM_CMD) uninstall $(name) $(HELM_REPO)/$(name) -n $(NAMESPACE)'
