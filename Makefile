#
# Code generated by `gkgen`
#

.DEFAULT_GOAL := gen
GOPATH := $(shell go env GOPATH)

# Service
name := strapi-webhook
version := 0.0.0
platforms := linux #windows linux darwin
arch := amd64
entryPoint := main.go

# Registry
registry := registry.gitlab.com
registryRepo := free-mind/hub

# K8s
target := username@example.com
kubectl := kubectl

# Git
gitBranch := $(shell git rev-parse --abbrev-ref HEAD)
gitCommit := $(shell git rev-parse --short HEAD)

-include .makerc

clean:
	@git clean -fdx

pod:
	@gkgen -k $(args) .

proto:
	@protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--go-grpc_out=base/pb \
		--go-grpc_opt=paths=source_relative \
		base/pb/strapi-webhook.proto

	@protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--gotag_out=. \
		base/pb/strapi-webhook.proto

fmt:
	@go fmt ./... > /dev/null

lint:
	@golangci-lint run --fix ./...

src:
	@gkgen -b $(args) .
	@make -s proto
	@make -s fmt

impl:
	@gkgen -i $(args) .
	@make -s fmt

gen:
	@gkgen $(args) .
	@make -s proto
	@make -s fmt

gen-clean:
	@gkgen -clean .

# Build and exec instead of @go run $(entryPoint)
# to run on Windows without deal with the Firewall
run:
	@go build -o dist/$(name) $(entryPoint)
	@dist/$(name)

watch:
	@nodemon -e go --ignore dist/ --exec make run

test:
	@go test -v ./... -cover

test-clean:
	@go clean -testcache

build: gen proto
	rm -rf dist
	@for p in $(platforms); do \
		echo dist/$(name)-$$p; \
		GOOS=$$p GOARCH=$(arch) go build -ldflags="-s -w" -o dist/$(name)-$$p $(entryPoint); \
	done

# K8s
oci:
	@buildah bud -t $(name):$(version) --build-arg name=$(name) --build-arg version=$(version)

ifneq ($(and $(REGISTRY_USERNAME),$(REGISTRY_PWD)),)
	@buildah login -u $(REGISTRY_USERNAME) -p $(REGISTRY_PWD) $(registry)
	buildah push $(name):$(version) $(registry)/$(registryRepo)/$(name):$(version)
endif

deploy:
	@scp k8s.yaml $(target):./k8s.yaml
	@ssh $(target) '$(kubectl) apply -n dev -f k8s.yaml'
	@ssh $(target) 'rm k8s.yaml'
	@ssh $(target) '$(kubectl) -n dev describe deployment $(name)'

deploy-delete:
	@scp k8s.yaml $(target):./k8s.yaml
	@ssh $(target) '$(kubectl) delete -n dev -f k8s.yaml'
	@ssh $(target) 'rm k8s.yaml'

deploy-restart:
	@ssh $(target) '$(kubectl) rollout -n dev restart deploy/$(name)'

deploy-prod:
	@ssh $(target) '$(kubectl) get node -n prod'
