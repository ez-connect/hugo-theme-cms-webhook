#
# Code generated by `gkgen`
#

.DEFAULT_GOAL := gen
GOPATH := $(shell go env GOPATH)

# Service
name := strapi-webhook
version := 0.0.2
platforms := linux #windows linux darwin
arch := amd64
entryPoint := main.go

# Git
gitBranch := $(shell git rev-parse --abbrev-ref HEAD)
gitCommit := $(shell git rev-parse --short HEAD)

-include .makerc

clean:
	@git clean -fdx

helm:
	@gkgen -k $(args) .
	@helm lint chart

proto:
	@protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--go-grpc_out=base/pb \
		--go-grpc_opt=paths=source_relative \
		base/pb/strapi-webhook.proto

	@protoc \
		-I $(GOPATH)/pkg/mod/github.com/srikrsna/protoc-gen-gotag@v0.6.2 \
		-I base/pb \
		--go_out=base/pb \
		--go_opt=paths=source_relative \
		--gotag_out=. \
		base/pb/strapi-webhook.proto

fmt:
	@go fmt ./... > /dev/null

lint:
	@golangci-lint run --fix ./...

src:
	@gkgen -b $(args) .
	@make -s proto
	@make -s fmt

impl:
	@gkgen -i $(args) .
	@make -s fmt

gen:
	@gkgen $(args) .
	@make -s proto
	@make -s fmt
	@helm lint chart

gen-clean:
	@gkgen -clean .

# Build and exec instead of @go run $(entryPoint)
# to run on Windows without deal with the Firewall
run:
	@go build -o dist/$(name) $(entryPoint)
	@dist/$(name) $(args)

watch:
	@nodemon -e go --ignore dist/ --exec make run

test:
	@go test -v ./... -cover

test-clean:
	@go clean -testcache

build: gen proto
	rm -rf dist
	@for p in $(platforms); do \
		echo dist/$(name)-$$p; \
		GOOS=$$p GOARCH=$(arch) go build -ldflags="-s -w" -o dist/$(name)-$$p $(entryPoint); \
	done

# K8s
oci:
	@buildah bud -t $(name):$(version) --build-arg name=$(name) --build-arg version=$(version)

ifneq ($(and $(REGISTRY_USERNAME),$(REGISTRY_PWD)),)
	@buildah login -u $(REGISTRY_USERNAME) -p $(REGISTRY_PWD) $(REGISTRY)
	buildah push $(name):$(version) $(REGISTRY)/$(REGISTRY_REPO)/$(name):$(version)
endif

# Helm chart
package:
	@helm cm-push chart/ hub-dev

deploy: package
	@ssh $(SSH_DESTINATION) '$(HELM_CMD) install $(name) hub-dev/$(name) -n dev'

deploy-delete: package
	@ssh $(SSH_DESTINATION) '$(HELM_CMD) uninstall $(name) hub-dev/$(name) -n dev'

deploy-restart:
	@ssh $(SSH_DESTINATION) '$(KUBECTL_CMD) rollout -n dev restart deploy/$(name)'

package-prod:
	@helm cm-push chart/ hub

deploy-prod: package-prod
	$(HELM_CMD) install $(name) hub-dev/$(name) -n prod
